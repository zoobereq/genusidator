#!/usr/bin/env python
"""A module applying semantic, morphological, and phonological criteria to explain the neuter gender assignment"""

from compound_parser import parser
from googletrans import Translator
from langdetect import detect

from hypernyms import taxonomy
from rules import neut_category_dict, neut_classes, neut_prefixes, neut_suffixes

translator = Translator()


def neut_rule1(hypernyms: list) -> set:
    """returns an intersection of the semantic categories associated with the neuter noun class and the set of hypernyms generated by the input noun.
    To simplyfy, the initially generated classes are expressed in terms of general semantic categories."""
    categories = []
    general_categories = []
    for category in hypernyms:
        if category in neut_classes:
            categories.append(category)
    for category in categories:
        for key, value in neut_category_dict.items():
            if category in value:
                general_categories.append(key)
    return set(general_categories)


def neut_rule2(token: str) -> list:
    """checks the input noun for the prefixes and suffixes associated with the neuter noun class"""
    suffixes = []
    prefixes = []
    for suffix in neut_suffixes:
        if token.endswith(suffix):
            suffixes.append("-" + suffix)
    for prefix in neut_prefixes:
        if token.startswith(prefix):
            prefixes.append(prefix + "-")
    return prefixes + max(suffixes, key=len).split() # split a string on whitespace to wrap it into a list


def masc_evaluate(lemmatized: str, hypernyms: list, ahocs) -> None:
    """the fucntion takes the noun and a set of hypernyms generated over all nominal synsets and determines if any of the hypernyms are affiliated with the neuter noun class.  It then performs simple morphological analysis by checking if the noun contains the prefixes and suffixes associated with the neuter gender."""
    neut_flag = False
    print(f"The noun '{lemmatized}' is neuter.")
    # check the semantic taxonomy
    if hypernyms:
        semantic = neut_rule1(hypernyms)
        if semantic:
            print(
                f"It belongs to the following predominantly neuter semantic categories: {', '.join(semantic)}"
            )
            neut_flag = True
        else:
            print(
                "Grammatical gender assignment could not be determined based on the semantic category alone."
            )
    elif not hypernyms: # if the word returns no hypernyms, parse it and repeat the proces for the base noun
        parsed = parser(lemmatized, ahocs)
        base = parsed[-1]
        parsed_translation = translator.translate(base, src="de", dest="en")
        translated_base = parsed_translation.text.casefold()
        base_hypernyms = taxonomy(translated_base)  # generate all possible hypernyms
        base_semantic = neut_rule1(base_hypernyms)
        if base_semantic:
            print(
                f"Couldn't find any semantic categories for '{lemmatized}'. The base noun '{base}' belongs to the following predominantly neuter semantic categories: {', '.join(base_semantic)}"
            )
            neut_flag = True
        else:
            print(
                f"Couldn't find any semantic categories for '{lemmatized}'. There are no predomiantly neuter semantic categories to which the base noun '{base}' blelongs."
            )
    # check the morphology
    morphological = neut_rule2(lemmatized)
    if morphological:
        print(
            f"The noun has the following neuter affixes: {', '.join(morphological)}"
        )
        neut_flag = True
    else:
        print(
            "Grammatical gender assignment cannot be determined based on the noun's morphology alone."
        )
    
    # check if the word is borrowed. Foreign borrowings are predominantly neuter
    if detect(lemmatized) != 'de':
        print(f"The word '{lemmatized}' is likely a borrowing from another langauge.  Imported words tend to be neuter")
        neut_flag = True
    

    # print this if none of the above applies
    if neut_flag == False:
        print(
            f"The grammatical gender of '{lemmatized}' cannot be explained with the available rules."
        )
        print("For better or worse, it has to be memorized")

